import ExcelJS from 'exceljs';

export const generateInvoiceExcel = async (invoiceData) => {
  const workbook = new ExcelJS.Workbook();
  const worksheet = workbook.addWorksheet('Invoice');

  // Set column widths
  worksheet.columns = [
    { header: 'Field', key: 'field', width: 20 },
    { header: 'Value', key: 'value', width: 30 }
  ];

  // Add company header
  worksheet.mergeCells('A1:B1');
  const titleCell = worksheet.getCell('A1');
  titleCell.value = 'MARBU FLEET MANAGEMENT - INVOICE';
  titleCell.font = { bold: true, size: 16 };
  titleCell.alignment = { horizontal: 'center' };

  // Add empty row
  worksheet.addRow({});

  // Add invoice details
  const invoice = invoiceData.invoice;
  
  worksheet.addRow({ field: 'Invoice Number', value: invoice.invoice_number });
  worksheet.addRow({ field: 'Invoice Date', value: new Date(invoice.invoice_date).toLocaleDateString() });
  worksheet.addRow({ field: 'Period Start', value: new Date(invoice.start_date).toLocaleDateString() });
  worksheet.addRow({ field: 'Period End', value: new Date(invoice.end_date).toLocaleDateString() });
  worksheet.addRow({ field: 'Site ID', value: invoice.site_id });
  worksheet.addRow({ field: 'Generated By', value: invoice.generated_by_user_id });
  worksheet.addRow({ field: 'Items Count', value: invoiceData.itemsCount });
  worksheet.addRow({ field: 'Total Amount (QAR)', value: invoiceData.totalAmount.toFixed(2) });

  // Style the header rows
  worksheet.getRow(3).font = { bold: true };
  worksheet.getRow(4).font = { bold: true };
  worksheet.getRow(5).font = { bold: true };
  worksheet.getRow(6).font = { bold: true };
  worksheet.getRow(7).font = { bold: true };
  worksheet.getRow(8).font = { bold: true };
  worksheet.getRow(9).font = { bold: true };
  worksheet.getRow(10).font = { bold: true };

  // Add border to all cells with data
  for (let i = 3; i <= 10; i++) {
    worksheet.getRow(i).eachCell((cell) => {
      cell.border = {
        top: { style: 'thin' },
        left: { style: 'thin' },
        bottom: { style: 'thin' },
        right: { style: 'thin' }
      };
    });
  }

  // Add empty rows
  worksheet.addRow({});
  worksheet.addRow({});

  // Add summary section
  const summaryRow = worksheet.addRow({ field: 'INVOICE SUMMARY', value: '' });
  summaryRow.getCell('A').font = { bold: true, size: 14 };
  
  worksheet.addRow({ field: 'Invoice ID', value: invoice.invoice_id });
  worksheet.addRow({ field: 'Total Amount', value: `QAR ${invoiceData.totalAmount.toFixed(2)}` });
  worksheet.addRow({ field: 'Status', value: 'Generated' });
  worksheet.addRow({ field: 'Generated On', value: new Date().toLocaleString() });

  // Style summary section
  for (let i = 14; i <= 17; i++) {
    worksheet.getRow(i).eachCell((cell) => {
      cell.border = {
        top: { style: 'thin' },
        left: { style: 'thin' },
        bottom: { style: 'thin' },
        right: { style: 'thin' }
      };
    });
  }

  // Generate buffer and download
  const buffer = await workbook.xlsx.writeBuffer();
  
  // Create blob and download
  const blob = new Blob([buffer], { 
    type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' 
  });
  
  const url = window.URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `Invoice_${invoice.invoice_number}_${new Date().toISOString().split('T')[0]}.xlsx`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  window.URL.revokeObjectURL(url);
};

export const generateReceivingInvoiceExcel = async (invoiceData) => {
  const workbook = new ExcelJS.Workbook();
  const worksheet = workbook.addWorksheet('Receiving Invoice');

  // Set column widths
  worksheet.columns = [
    { header: 'Field', key: 'field', width: 20 },
    { header: 'Value', key: 'value', width: 30 }
  ];

  // Add company header
  worksheet.mergeCells('A1:B1');
  const titleCell = worksheet.getCell('A1');
  titleCell.value = 'MARBU FLEET MANAGEMENT - RECEIVING INVOICE';
  titleCell.font = { bold: true, size: 16 };
  titleCell.alignment = { horizontal: 'center' };

  // Add empty row
  worksheet.addRow({});

  // Add invoice details
  const invoice = invoiceData.invoice;
  
  worksheet.addRow({ field: 'Invoice Number', value: invoice.invoice_number });
  worksheet.addRow({ field: 'Invoice Date', value: new Date(invoice.invoice_date).toLocaleDateString() });
  worksheet.addRow({ field: 'Period Start', value: new Date(invoice.start_date).toLocaleDateString() });
  worksheet.addRow({ field: 'Period End', value: new Date(invoice.end_date).toLocaleDateString() });
  worksheet.addRow({ field: 'Site ID', value: invoice.site_id });
  worksheet.addRow({ field: 'Generated By', value: invoice.generated_by_user_id });
  worksheet.addRow({ field: 'Receiving Records', value: invoiceData.itemsCount });
  worksheet.addRow({ field: 'Total Amount (QAR)', value: invoiceData.totalAmount.toFixed(2) });

  // Style the header rows
  for (let i = 3; i <= 10; i++) {
    const row = worksheet.getRow(i);
    row.getCell('A').font = { bold: true };
    row.eachCell((cell) => {
      cell.border = {
        top: { style: 'thin' },
        left: { style: 'thin' },
        bottom: { style: 'thin' },
        right: { style: 'thin' }
      };
    });
  }

  // Add empty rows
  worksheet.addRow({});
  worksheet.addRow({});

  // Add summary section
  const summaryRow = worksheet.addRow({ field: 'RECEIVING INVOICE SUMMARY', value: '' });
  summaryRow.getCell('A').font = { bold: true, size: 14 };
  
  worksheet.addRow({ field: 'Invoice Type', value: 'Fuel Receiving' });
  worksheet.addRow({ field: 'Invoice ID', value: invoice.invoice_id });
  worksheet.addRow({ field: 'Total Amount', value: `QAR ${invoiceData.totalAmount.toFixed(2)}` });
  worksheet.addRow({ field: 'Rate per Liter', value: 'QAR 2.50' }); // Based on the backend logic
  worksheet.addRow({ field: 'Status', value: 'Generated' });
  worksheet.addRow({ field: 'Generated On', value: new Date().toLocaleString() });

  // Style summary section
  for (let i = 14; i <= 19; i++) {
    worksheet.getRow(i).eachCell((cell) => {
      cell.border = {
        top: { style: 'thin' },
        left: { style: 'thin' },
        bottom: { style: 'thin' },
        right: { style: 'thin' }
      };
    });
  }

  // Generate buffer and download
  const buffer = await workbook.xlsx.writeBuffer();
  
  // Create blob and download
  const blob = new Blob([buffer], { 
    type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' 
  });
  
  const url = window.URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `Receiving_Invoice_${invoice.invoice_number}_${new Date().toISOString().split('T')[0]}.xlsx`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  window.URL.revokeObjectURL(url);
};
